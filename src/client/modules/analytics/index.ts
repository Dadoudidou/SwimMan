
import * as assign from "object-assign";

let __globalNameLibrary: string = undefined;

const checkLoadLibrary = (): boolean => {
    if(__globalNameLibrary) return true;
    if(console.warn) console.warn("[redux-analytics]", "Library is not loaded.");
    return false;
}

export const loadLibrary = (globalName: string = "analytics") => {
    if(__globalNameLibrary == undefined){

        __globalNameLibrary = globalName;
        
        //chargement librairie analytics
        (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
            (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*(new Date() as any);a=s.createElement(o),
            m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
            })(window,document,'script','https://www.google-analytics.com/analytics.js', globalName);
    }
}

type hitType = "pageview" | "event" | "social" | "timing" | "exception";

interface ICreateProps {
    /** trackin id */
    trackingId: string
    /** Name of the tracker object */
    name?: string
    /** Anonymously identifies a browser instance */
    clientId?: string
    /** Specifies what percentage of users should be tracked. */
    sampleRate?: number
    /** This setting determines how often site speed tracking beacons will be sent */
    siteSpeedSampleRate?: number
    /** By default the HTTP referrer URL, which is used to attribute traffic sources, is only sent when the hostname of the referring site differs from the hostname of the current page. Enable this setting only if you want to process other pages from your current host as referrals */
    alwaysSendReferrer?: boolean
    /** By default, analytics.js will search for custom campaign parameters such as utm_source, utm_medium, etc. in both the query string and anchor of the current page's URL. Setting this field to false will result in ignoring any custom campaign parameters that appear in the anchor. */
    allowAnchor?: boolean
    /** Name of the cookie used to store analytics data */
    cookieName?: string
    /** Specifies the domain used to store the analytics cookie. Setting this to 'none' sets the cookie without specifying a domain. */
    cookieDomain?: string
    /** Specifies the cookie expiration, in seconds. */
    cookieExpires?: number
    /** By default analytics.js writes a cookie to store campaign information. This field can be used to disable writing of that cookie. */
    storeGac?: boolean
    /** This field is used to configure how analytics.js searches for cookies generated by earlier Google Analytics tracking scripts such as ga.js and urchin.js. */
    legacyCookieDomain?: string
    /** Specifies whether analytics.js should attempt to import history data from ga.js cookies. */
    legacyHistoryImport?: string
    /** Setting this field to true will enables the parsing of cross-domain linker parmeters used to transfer state across domains. */
    allowLinker?: boolean
    /** This field is required if Client ID (cid) is not specified in the request. This is intended to be a known identifier for a user provided by the site owner/tracking library user. It must not itself be PII (personally identifiable information). The value should never be persisted in GA cookies or other Analytics provided storage. */
    userId?: string
}

interface ISetProps {
    /** When present, the IP address of the sender will be anonymized. */
    anonymizeIp?: boolean
    /** Indicates the data source of the hit. Hits sent from analytics.js will have data source set to 'web'; hits sent from one of the mobile SDKs will have data source set to 'app'. */
    dataSource?: string
    /** Used to collect offline / latent hits. The value represents the time delta (in milliseconds) between when the hit being reported occurred and the time the hit was sent. The value must be greater than or equal to 0. Values greater than four hours may lead to hits not being processed. */
    queueTime?: number
    /** By default, tracking beacons sent from https pages will be sent using https while beacons sent from http pages will be sent using http. Setting forceSSL to true will force http pages to also send all beacons using https. */
    forceSSL?: boolean
    /** This field is required if Client ID (cid) is not specified in the request. This is intended to be a known identifier for a user provided by the site owner/tracking library user. It must not itself be PII (personally identifiable information). The value should never be persisted in GA cookies or other Analytics provided storage. */
    userId?: string
    /** Specifies which referral source brought traffic to a website. This value is also used to compute the traffic source. The format of this value is a URL. This field is initialized by the create command and is only set when the current hostname differs from the referrer hostname, unless the 'alwaysSendReferrer' field is set to true. */
    referrer?: string
    /** Specifies the campaign name. */
    campaignName?: string
    /** Specifies the campaign source. */
    campaignSource?: string
    /** Specifies the campaign medium. */
    campaignMedium?: string
    /** Specifies the campaign keyword. */
    campaignKeyword?: string
    /** Specifies the campaign content. */
    campaignContent?: string
    /** Specifies the campaign ID. */
    campaignId?: string
    /** Specifies the screen resolution. This field is initialized by the create command. */
    screenResolution?: string
    /** Specifies the viewable area of the browser / device. This field is initialized by the create command. */
    viewportSize?: string
    /** Specifies the character set used to encode the page / document. This field is initialized by the create command. */
    encoding?: string
    /** Specifies the screen color depth. This field is initialized by the create command. */
    screenColors?: string
    /** Specifies the language. This field is initialized by the create command. */
    language?: string
    /** Specifies whether Java was enabled. This field is initialized by the create command. */
    javaEnabled?: boolean
    /** Specifies the flash version. This field is initialized by the create command. */
    flashVersion?: string
    /** Specifies that a hit be considered non-interactive. */
    nonInteraction?: boolean
    /** Specifies the full URL (excluding anchor) of the page. This field is initialized by the create command. */
    location?: string
    /** Specifies the hostname from which content was hosted. */
    hostname?: string
    /** The path portion of the page URL. Should begin with '/'. For 'pageview' hits, either &dl or both &dh and &dp have to be specified for the hit to be valid. Used to specify virtual page paths. */
    page?: string
    /** The title of the page / document. Defaults to document.title. */
    title?: string
    /** This parameter is optional on web properties, and required on mobile properties for screenview hits, where it is used for the 'Screen Name' of the screenview hit. On web properties this will default to the unique URL of the page by either using the &dl parameter as-is or assembling it from &dh and &dp. */
    screenName?: string
    /** You can have up to 5 content groupings, each of which has an associated index between 1 and 5, inclusive. Each content grouping can have up to 100 content groups. The value of a content group is hierarchical text delimited by '/". All leading and trailing slashes will be removed and any repeated slashes will be reduced to a single slash. For example, '/a//b/' will be converted to 'a/b'. */
    contentGroup?: string
    /** The ID of a clicked DOM element, used to disambiguate multiple links to the same URL in In-Page Analytics reports when Enhanced Link Attribution is enabled for the property. */
    linkid?: string
    /** Specifies the application name. This field is required for any hit that has app related data (i.e., app version, app ID, or app installer ID). For hits sent to web properties, this field is optional. */
    appName?: string
    /** Application identifier. */
    appId?: string
    /** Specifies the application version. */
    appVersion?: string
    /** Application installer identifier. */
    appInstallerId?: string
    /** When present indicates the local currency for all transaction currency values. Value should be a valid ISO 4217 currency code. */
    currencyCode?: string
    /** Each custom dimension has an associated index. There is a maximum of 20 custom dimensions (200 for Analytics 360 accounts). The dimension index must be a positive integer between 1 and 200, inclusive. */
    dimension?: string
    /** Each custom metric has an associated index. There is a maximum of 20 custom metrics (200 for Analytics 360 accounts). The metric index must be a positive integer between 1 and 200, inclusive. */
    metric?: number
    /** This parameter specifies that this user has been exposed to an experiment with the given ID. It should be sent in conjunction with the Experiment Variant parameter. */
    expId?: string
    /** This parameter specifies that this user has been exposed to a particular variation of an experiment. It should be sent in conjunction with the Experiment ID parameter. */
    expVar?: string
}

interface ISendProps {
    /** This specifies the transport mechanism with which hits will be sent. The options are 'beacon', 'xhr', or 'image'. By default, analytics.js will try to figure out the best method based on the hit size and browser capabilities. If you specify 'beacon' and the user's browser does not support the `navigator.sendBeacon` method, it will fall back to 'image' or 'xhr' depending on hit size. */
    transport?: string
    /** This option is now deprecated. Use 'transport' instead. Setting this to true, will instruct the client to use navigator.sendBeacon to send the hit. This is useful in cases where you wish to track an event just before a user navigates away from your site, without delaying the navigation. If the browser does not support navigator.sendBeacon, the hit will be sent normally. */
    useBeacon?: boolean
    /** A function that will be called after processing a hit. This callback is designed to always be called, either directly after a hit is sent successfully or when it has been determined that a hit cannot be sent or has failed to send. No arguments are passed to the function when called. You may want to avoid using hitcallBack to execute code that is critical to your application since it's possible it may not get called in rare cases (e.g. if the server doesn't respond or analytics.js fails to load). In this case you can set a timeout to ensure execution. */
    hitCallback?: () => void
    /** Used to control the session duration. A value of 'start' forces a new session to start with this hit and 'end' forces the current session to end with this hit. All other values are ignored. */
    sessionControl?: string
}

interface ISendEventProps {
    /** Specifies the event category. Must not be empty. */
    eventCategory?: string
    /** Specifies the event action. Must not be empty. */
    eventAction?: string
    /** Specifies the event label. */
    eventLabel?: string
    /** Specifies the event value. Values must be non-negative. */
    eventValue?: number
}

interface ISendTimingProps {
    /** Specifies the user timing category. */
    timingCategory?: string
    /** Specifies the user timing variable. */
    timingVar?: string
    /** Specifies the user timing value. The value is in milliseconds. */
    timingValue?: number
    /** Specifies the user timing label. */
    timingLabel?: string
}

interface ISendPageViewProps {
    /** The path portion of the page URL. Should begin with '/'. For 'pageview' hits, either &dl or both &dh and &dp have to be specified for the hit to be valid. Used to specify virtual page paths. */
    page?: string
}

interface ISendSocialProps {
    /** Specifies the social network, for example Facebook or Google Plus. */
    socialNetwork?: string
    /** Specifies the social interaction action. For example on Google Plus when a user clicks the +1 button, the social action is 'plus'. */
    socialAction?: string
    /** Specifies the target of a social interaction. This value is typically a URL but can be any text. */
    socialTarget?: string
}

interface ISendExceptionProps {
    /** Specifies the description of an exception. */
    exDescription?: string
    /** Specifies whether the exception was fatal. */
    exFatal?: boolean
}


export class Tracker {

    config: ICreateProps

    constructor(trackingId: string, options?: Partial<ICreateProps>) {
        this.config = {
            ...options,
            trackingId: trackingId
        }
    }

    private GetTrackerPreCommand(): string {
        if(this.config && this.config.name) return this.config.name + ".";
        return "";
    }

    /** Creates a new tracker instance with the specified fields. */
    create(): Tracker{
        if(!checkLoadLibrary()) return this;
        window[__globalNameLibrary]("create", this.config);
        return this;
    }

    /** Removes a tracker object. */
    remove(): Tracker{
        if(!checkLoadLibrary()) return this;
        window[__globalNameLibrary]( this.GetTrackerPreCommand() + "remove");
        return this;
    }

    /** Sends a hit to Google Analytics. */
    send(hitType: hitType, parameter: ISendEventProps & ISendExceptionProps & ISendPageViewProps & ISendSocialProps & ISendTimingProps & ISendProps): Tracker{
        if(!checkLoadLibrary()) return this;
        window[__globalNameLibrary]( this.GetTrackerPreCommand() + "send", {
            hitType: hitType,
            ...parameter
        });
        return this;
    }

    /** Sets a group of field/value pairs on a tracker object. */
    set(parameter: ISetProps): Tracker{
        if(!checkLoadLibrary()) return this;
        window[__globalNameLibrary](this.GetTrackerPreCommand() + "set", parameter);
        return this;
    }

    /** Sets a single field and value pair on a tracker object. */
    setParameter(name: keyof(ISetProps), value: any): Tracker{
        if(!checkLoadLibrary()) return this;
        window[__globalNameLibrary](this.GetTrackerPreCommand() + "set", name, value);
        return this;
    }

    /** Sends a page view to Google Analytics. */
    pageView(page: string, optionalParameters?: ISendProps){ 
        return this.send("pageview", {
            ...optionalParameters,
            page: page
        });
    }

    /** Sends a event to Google Analytics. */
    event(category: string, action: string, label?: string, value?: number, optionalParameters?: ISendProps){ 
        if(value!= undefined && value < 0){
            if(console.warn) console.warn("[redux-analytics]", "value must be positive.");
            return this;
        }
        return this.send("event", {
            ...optionalParameters,
            eventCategory: category,
            eventAction: action,
            eventLabel: label,
            eventValue: value
        });
    }

    /** Sends a social event to Google Analytics. */
    social(network: string, action: string, target: string, optionalParameters?: ISendProps){ 
        return this.send("social", {
            ...optionalParameters,
            socialNetwork: network,
            socialAction: action,
            socialTarget: target
        });
    }

    /** Sends a timing event to Google Analytics. */
    timing(category: string, variable: string, value: number, label?: string, optionalParameters?: ISendProps){ 
        if(value!= undefined && value < 0){
            if(console.warn) console.warn("[redux-analytics]", "value must be positive.");
            return this;
        }
        return this.send("timing", {
            ...optionalParameters,
            timingCategory: category,
            timingVar: variable,
            timingValue: value,
            timingLabel: label
        });
    }

    /** Sends a exception event to Google Analytics. */
    exception(description?: string, fatal?: boolean, optionalParameters?: ISendProps){
        return this.send("exception", {
            ...optionalParameters,
            exDescription: description,
            exFatal: fatal
        });
    }

    /** load plugin. */
    require(pluginName: string, pluginOptions?: any): Tracker{
        if(!checkLoadLibrary()) return this;
        window[__globalNameLibrary]( this.GetTrackerPreCommand() + "require", pluginName, pluginOptions);
        return this;
    }

    /** register plugin. */
    provide(pluginName: string, pluginConstuctor: (new <T>(tracker, option: T) => any )){
        if(!checkLoadLibrary()) return this;
        let __this = this;
        function trackerPlugin(tracker, option){
            new pluginConstuctor(__this, option);
        }
        window[__globalNameLibrary]( this.GetTrackerPreCommand() + "provide", pluginName, trackerPlugin);
        return this;
    }

    callPluginMethod(pluginName: string, pluginMethod: string, parameter?: any){
        if(!checkLoadLibrary()) return this;
        window[__globalNameLibrary]( this.GetTrackerPreCommand() + pluginName + ":" + pluginMethod, parameter);
        return this;
    }
}

